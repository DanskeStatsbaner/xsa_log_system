PROCEDURE "DataWareHouse.Database.Procedures::ES_aggregated"(
	
	IN aggregate_option NVARCHAR(50)
	 
	/* Input parameter should be: TIME, HOST, PORT, CONN_ID, HASH, APP_USER, DB_USER, OPERATION, SOURCE, ERROR, BINDS or comma separated combinations, NONE for no aggregation 
	SCHEMA_NAME, APP_USER, APPLICATION_NAME	*/
)
--===========================
/*
----------------------------------------------------------------------------------------------
 04.2023, @Marek Janczura
1. Extended the HANA_SQL_ExpensiveStatements_1.00.120+_Janczura_Marek_extended
with 4 new columns for Aggregation and filtering
*/

LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER

--READS SQL DATA AS --for DEBUG session only END
-- COMMENT FOR DEBUGGIER:
AS
BEGIN

DECLARE k, CONN_ID, NUM_OOMS, EXECUTIONS Integer;
DECLARE OOM_TIME,RUNTIME_START, RUNTIME_END, LAST_RUN Timestamp;
DECLARE ingesttoken NVARCHAR(2500);
DECLARE HOST, PORT, STATEMENT_HASH, TRACEFILE_NAME, EVENT_REASON,HANA_LOG_NAME, ENVIRONMENT,  WORKLOAD_CLASS_NAME, EXECUTION_ENGINE,SCHEMA_NAME,USER_NAME, APPLICATION_NAME, APP_USER  NVARCHAR(250);
DECLARE ELAPSED_MS, CPU_MS, ELA_PER_EXEC_MS, REC_PER_EXEC, CPU_PER_EXEC_MS, MEM_PER_EXEC_GB DECIMAL (10,2);
DECLARE STATEMENT_STRING NVARCHAR(3000);
DECLARE ACCESSED_OBJECT_NAMES NVARCHAR(2500); 
DECLARE FIRST_FROM NVARCHAR(2500);
DECLARE HANA_LOG_COMMENT NVARCHAR(500) = '';
DECLARE STATEMENT_ID Bigint;
DECLARE MEM_REQ_GB, MEM_USED_GB, MEM_LIMIT_GB DECIMAL (10,2);
--DECLARE NUM_RECS_ES_LOG Integer;

RUNTIME_START = CURRENT_TIMESTAMP;
HANA_LOG_NAME ='ES_aggregated';
SELECT IFNULL(MAX("RUNTIME_START"),'2023-03-01 09:00:00.000000000') INTO LAST_RUN FROM "DataWareHouse.Database.Tables::log.procedure_run"
WHERE "NAME" = 'ES_aggregated';
		
SAP_TABLE = 
SELECT
START_TIME,
  HOST,
  LPAD(PORT, 5) PORT,
  LPAD(CONN_ID, 10) CONN_ID,
  STATEMENT_HASH,
  LPAD(EXECUTIONS, 10) EXECUTIONS,
  LPAD(TO_DECIMAL(ELAPSED_MS, 12, 2), 14) ELAPSED_MS,
  LPAD(TO_DECIMAL(CPU_MS, 12, 2), 10) CPU_MS,
  LPAD(TO_DECIMAL(ELA_PER_EXEC_MS, 12, 2), 15) ELA_PER_EXEC_MS,
  IFNULL(LPAD(TO_DECIMAL(SRV_PER_EXEC_MS, 12, 2) , 15), 'n/a') SRV_PER_EXEC_MS,
  LPAD(TO_DECIMAL(REC_PER_EXEC, 12, 2), 13) REC_PER_EXEC,
  LPAD(TO_DECIMAL(LOCK_PER_EXEC_MS, 12, 2), 16) LOCK_PER_EXEC_MS,
  LPAD(TO_DECIMAL(CPU_PER_EXEC_MS, 12, 2), 15) CPU_PER_EXEC_MS,
  LPAD(TO_DECIMAL(MEM_USED_GB, 10, 2), 11) MEM_USED_GB,
  LPAD(TO_DECIMAL(MEM_PER_EXEC_GB, 10, 2), 15) MEM_PER_EXEC_GB,
  OPERATION,
  APP_SOURCE,
  APP_USER,
  DB_USER,
  ERROR,
  LPAD(TO_DECIMAL(SQL_TEXT_LENGTH, 10, 0), 7) SQL_LEN,
  SQL_TEXT,
  BIND_VALUES,
  IFNULL(LOCATION_STATISTICS, '') LOCATION_STATISTICS,
  STATEMENT_ID,
  SCHEMA_NAME,
  APPLICATION_NAME,
  WORKLOAD_CLASS_NAME
FROM
( SELECT
    HOST,
    PORT,
    CONN_ID,
    STATEMENT_HASH,
    EXECUTIONS,
    ELAPSED_MS,
    CPU_MS,
    ELA_PER_EXEC_MS,
    SRV_PER_EXEC_MS,
    LOCK_PER_EXEC_MS,
    CPU_PER_EXEC_MS,
    REC_PER_EXEC,
    MEM_USED_GB,
    MEM_PER_EXEC_GB,
    START_TIME,
    OPERATION,
    APP_SOURCE,
    APP_USER,
    DB_USER,
    ERROR,
    SUBSTR(CASE
      WHEN LOCATE(UPPER(SQL_TEXT), 'FROM') <= 15 THEN
        SQL_TEXT
      ELSE
        SUBSTR(SQL_TEXT, 1, LOCATE(SQL_TEXT, CHAR(32))) || '...' || SUBSTR(SQL_TEXT, LOCATE(UPPER(SQL_TEXT), 'FROM') - 1)
    END, 1, MAP(SQL_TEXT_OUTPUT_LENGTH, -1, 9999, SQL_TEXT_OUTPUT_LENGTH)) SQL_TEXT,
    SQL_TEXT_LENGTH,
    BIND_VALUES,
    LOCATION_STATISTICS,
    STATEMENT_ID,
	SCHEMA_NAME,
	APPLICATION_NAME,
	WORKLOAD_CLASS_NAME,
    RESULT_ROWS,
    ROW_NUMBER () OVER (ORDER BY
      MAP(ORDER_BY, 'TIME', START_TIME) DESC, 
      MAP(ORDER_BY, 'DURATION', ELAPSED_MS, 'MEMORY', MEM_USED_GB, 'CPU', CPU_MS, 'COUNT', EXECUTIONS, 'EXECUTIONS', EXECUTIONS, 'LENGTH', SQL_TEXT_LENGTH) DESC
    ) ROW_NUM
  FROM
  ( SELECT
      CASE 
        WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TIME') != 0 THEN 
          CASE 
            WHEN BI.TIME_AGGREGATE_BY LIKE 'TS%' THEN
              TO_VARCHAR(ADD_SECONDS(TO_TIMESTAMP('2014/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS'), FLOOR(SECONDS_BETWEEN(TO_TIMESTAMP('2014/01/01 00:00:00', 
              'YYYY/MM/DD HH24:MI:SS'), CASE BI.TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(ES.START_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE ES.START_TIME END) / SUBSTR(BI.TIME_AGGREGATE_BY, 3)) * SUBSTR(BI.TIME_AGGREGATE_BY, 3)), 'YYYY/MM/DD HH24:MI:SS')
            ELSE TO_VARCHAR(CASE BI.TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(ES.START_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE ES.START_TIME END, BI.TIME_AGGREGATE_BY)
          END
        ELSE 'any' 
      END START_TIME,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')      != 0 THEN ES.HOST                                             ELSE MAP(BI.HOST, '%', 'any', BI.HOST)                     END HOST,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PORT')      != 0 THEN TO_VARCHAR(ES.PORT)                                 ELSE MAP(BI.PORT, '%', 'any', BI.PORT)                     END PORT,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HASH')      != 0 THEN ES.STATEMENT_HASH                                   ELSE MAP(BI.STATEMENT_HASH, '%', 'any', BI.STATEMENT_HASH) END STATEMENT_HASH,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'STATEMENT_ID')      != 0 THEN ES.STATEMENT_ID                             ELSE MAP(BI.STATEMENT_ID, '%', 'any', BI.STATEMENT_ID) END STATEMENT_ID,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CONN_ID')   != 0 THEN TO_VARCHAR(ES.CONNECTION_ID)                        ELSE MAP(BI.CONN_ID, -1, 'any', TO_VARCHAR(BI.CONN_ID))    END CONN_ID,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'OPERATION') != 0 THEN ES.OPERATION                                        ELSE MAP(BI.OPERATIONS, '%', 'any', BI.OPERATIONS)         END OPERATION,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'APP_USER')  != 0 THEN ES.APP_USER                                         ELSE MAP(BI.APP_USER, '%', 'any', BI.APP_USER)             END APP_USER,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'SCHEMA_NAME')  != 0 THEN ES.SCHEMA_NAME                                         ELSE MAP(BI.SCHEMA_NAME, '%', 'any', BI.SCHEMA_NAME)             END SCHEMA_NAME,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'APPLICATION_NAME')  != 0 THEN ES.APPLICATION_NAME                                         ELSE MAP(BI.APPLICATION_NAME, '%', 'any', BI.APPLICATION_NAME)             END APPLICATION_NAME,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'WORKLOAD_CLASS_NAME')  != 0 THEN ES.WORKLOAD_CLASS_NAME                                         ELSE MAP(BI.WORKLOAD_CLASS_NAME, '%', 'any', BI.WORKLOAD_CLASS_NAME)             END WORKLOAD_CLASS_NAME,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'DB_USER')   != 0 THEN ES.DB_USER                                          ELSE MAP(BI.DB_USER, '%', 'any', BI.DB_USER)               END DB_USER,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'SOURCE')    != 0 THEN ES.APPLICATION_SOURCE                               ELSE MAP(BI.APP_SOURCE, '%', 'any', BI.APP_SOURCE)         END APP_SOURCE,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'ERROR')     != 0 THEN ES.ERROR_CODE || MAP(ES.ERROR_TEXT, '', '', ' (' || ES.ERROR_TEXT || ')') ELSE 'any'                           END ERROR,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'BINDS')     != 0 THEN ES.PARAMETERS                                       ELSE 'any'                                                 END BIND_VALUES,
      COUNT(*) EXECUTIONS,
      SUM(ES.DURATION_MICROSEC) / 1000 ELAPSED_MS,
      SUM(CASE WHEN ES.CPU_TIME / 1024 / 1024 / 1024 BETWEEN 0 AND 1000000 THEN ES.CPU_TIME ELSE 0 END) / 1000 CPU_MS,
      SUM(ES.DURATION_MICROSEC) / COUNT(*) / 1000 ELA_PER_EXEC_MS,
      SUM(N.SERVER_DURATION) / COUNT(*) / 1000 SRV_PER_EXEC_MS,
      SUM(ES.LOCK_WAIT_DURATION) / COUNT(*) / 1000 LOCK_PER_EXEC_MS,
      SUM(CASE WHEN ES.CPU_TIME / 1024 / 1024 / 1024 BETWEEN 0 AND 1000000 THEN ES.CPU_TIME ELSE 0 END) / COUNT(*) / 1000 CPU_PER_EXEC_MS,
      SUM(GREATEST(CASE WHEN ES.RECORDS BETWEEN 0 AND 100000000000 THEN ES.RECORDS ELSE 0 END, 0)) / COUNT(*) REC_PER_EXEC,
      SUM(CASE WHEN ES.MEMORY_SIZE / 1024 / 1024 / 1024 >= 1000000 THEN 0 ELSE ES.MEMORY_SIZE / 1024 / 1024 / 1024 END) MEM_USED_GB,
      SUM(CASE WHEN ES.MEMORY_SIZE / 1024 / 1024 / 1024 >= 1000000 THEN 0 ELSE ES.MEMORY_SIZE / 1024 / 1024 / 1024 END) / COUNT(*) MEM_PER_EXEC_GB,
      LTRIM(MAP(MIN(TO_VARCHAR(SUBSTR(ES.STATEMENT_STRING, 1, 5000))), MAX(TO_VARCHAR(SUBSTR(ES.STATEMENT_STRING, 1, 5000))), MIN(TO_VARCHAR(SUBSTR(ES.STATEMENT_STRING, 1, 5000))), 'various')) SQL_TEXT,
      AVG(LENGTH(ES.STATEMENT_STRING)) SQL_TEXT_LENGTH,
      MAP(MIN(ESL.LOCATION_STATISTICS), MAX(ESL.LOCATION_STATISTICS), MIN(ESL.LOCATION_STATISTICS), 'various') LOCATION_STATISTICS,
      BI.ORDER_BY,
      BI.RESULT_ROWS,
      BI.SQL_TEXT_OUTPUT_LENGTH,
      BI.MIN_SQL_TEXT_LENGTH
    FROM
    ( SELECT
        CASE
          WHEN BEGIN_TIME =    'C'                             THEN CURRENT_TIMESTAMP
          WHEN BEGIN_TIME LIKE 'C-S%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-S'))
          WHEN BEGIN_TIME LIKE 'C-M%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-M') * 60)
          WHEN BEGIN_TIME LIKE 'C-H%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-H') * 3600)
          WHEN BEGIN_TIME LIKE 'C-D%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-D') * 86400)
          WHEN BEGIN_TIME LIKE 'C-W%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-W') * 86400 * 7)
          WHEN BEGIN_TIME LIKE 'E-S%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-S'))
          WHEN BEGIN_TIME LIKE 'E-M%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-M') * 60)
          WHEN BEGIN_TIME LIKE 'E-H%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-H') * 3600)
          WHEN BEGIN_TIME LIKE 'E-D%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-D') * 86400)
          WHEN BEGIN_TIME LIKE 'E-W%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-W') * 86400 * 7)
          WHEN BEGIN_TIME =    'MIN'                           THEN TO_TIMESTAMP('1000/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS')
          WHEN SUBSTR(BEGIN_TIME, 1, 1) NOT IN ('C', 'E', 'M') THEN TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS')
        END BEGIN_TIME,
        CASE
          WHEN END_TIME =    'C'                             THEN CURRENT_TIMESTAMP
          WHEN END_TIME LIKE 'C-S%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-S'))
          WHEN END_TIME LIKE 'C-M%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-M') * 60)
          WHEN END_TIME LIKE 'C-H%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-H') * 3600)
          WHEN END_TIME LIKE 'C-D%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-D') * 86400)
          WHEN END_TIME LIKE 'C-W%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-W') * 86400 * 7)
          WHEN END_TIME LIKE 'B+S%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+S'))
          WHEN END_TIME LIKE 'B+M%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+M') * 60)
          WHEN END_TIME LIKE 'B+H%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+H') * 3600)
          WHEN END_TIME LIKE 'B+D%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+D') * 86400)
          WHEN END_TIME LIKE 'B+W%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+W') * 86400 * 7)
          WHEN END_TIME =    'MAX'                           THEN TO_TIMESTAMP('9999/12/31 00:00:00', 'YYYY/MM/DD HH24:MI:SS')
          WHEN SUBSTR(END_TIME, 1, 1) NOT IN ('C', 'B', 'M') THEN TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS')
        END END_TIME,
        TIMEZONE,
        HOST,
        PORT,
        CONN_ID,
        STATEMENT_HASH,
        APP_USER,
        DB_USER,
        SQL_PATTERN,
        APP_SOURCE,
        ERROR_CODE,
        ERROR_TEXT,
        ONLY_ERRORS,
        SQL_TEXT_OUTPUT_LENGTH,
        MIN_MEM_GB,
        MAX_MEM_GB,
        MIN_DURATION_S,
        MIN_SQL_TEXT_LENGTH,
        OPERATIONS,
        AGGREGATE_BY,
        ORDER_BY,
        RESULT_ROWS,
        MAP(TIME_AGGREGATE_BY,
          'NONE',        'YYYY/MM/DD HH24:MI:SS',
          'HOUR',        'YYYY/MM/DD HH24',
          'DAY',         'YYYY/MM/DD (DY)',
          'HOUR_OF_DAY', 'HH24',
          TIME_AGGREGATE_BY ) TIME_AGGREGATE_BY,
       "STATEMENT_ID",
		"SCHEMA_NAME",
		"APPLICATION_NAME",
		"WORKLOAD_CLASS_NAME"
      FROM
      ( SELECT                                       /* Modification section */
          '1000/10/18 07:58:00' BEGIN_TIME,                  /* YYYY/MM/DD HH24:MI:SS timestamp, C, C-S<seconds>, C-M<minutes>, C-H<hours>, C-D<days>, C-W<weeks>, E-S<seconds>, E-M<minutes>, E-H<hours>, E-D<days>, E-W<weeks>, MIN */
          -- In the next run do not read again same statements
          --SUBSTRING (LAST_RUN,0,4) || '/' || SUBSTRING (LAST_RUN,6,2) || '/' || SUBSTRING (LAST_RUN,9,2) || ' '|| SUBSTRING (LAST_RUN,12,8) BEGIN_TIME,
          '9999/10/18 08:05:00' END_TIME,                    /* YYYY/MM/DD HH24:MI:SS timestamp, C, C-S<seconds>, C-M<minutes>, C-H<hours>, C-D<days>, C-W<weeks>, B+S<seconds>, B+M<minutes>, B+H<hours>, B+D<days>, B+W<weeks>, MAX */
          'SERVER' TIMEZONE,                              /* SERVER, UTC */
          '%' HOST,
          '%' PORT,
          -1 CONN_ID,
          '%' STATEMENT_HASH,
          '%' APP_USER,
          '%' DB_USER,
          '%' SQL_PATTERN,
          '%' APP_SOURCE,
          -1 ERROR_CODE,
          '%' ERROR_TEXT,
          ' ' ONLY_ERRORS,
          40  SQL_TEXT_OUTPUT_LENGTH,
          -1 MIN_MEM_GB,
          -1 MAX_MEM_GB,
          -1 MIN_DURATION_S,
          -1 MIN_SQL_TEXT_LENGTH,
          '%' OPERATIONS,     /* TOTAL for total values per statement (AGGREGATED_EXECUTION + CALL + EXECUTE + EXECUTE_DDL + INSERT + UPDATE + DELETE + COMPILE), various individual steps like SELECT or COMPILE */
          :aggregate_option AGGREGATE_BY,                         /* TIME, HOST, PORT, CONN_ID, HASH, APP_USER, DB_USER, OPERATION, SOURCE, ERROR, BINDS or comma separated combinations, NONE for no aggregation */
        			/* Marek Janczura: Extended with 4 new columns*/
          'NONE' TIME_AGGREGATE_BY,                    /* HOUR, DAY, HOUR_OF_DAY or database time pattern, TS<seconds> for time slice, NONE for no aggregation */
          'LENGTH' ORDER_BY,                             /* TIME, DURATION, MEMORY, COUNT, CPU, EXECUTIONS, LENGTH */
          -1 RESULT_ROWS,
           '%' "STATEMENT_ID",
		'%' "SCHEMA_NAME",
		'%' "APPLICATION_NAME",
		'%' "WORKLOAD_CLASS_NAME"
        FROM
          "DataWareHouse.Database.Synonyms::DUMMY"
      )
    ) BI INNER JOIN
       "DataWareHouse.Database.Tables::log.es_new_logs" ES ON
        CASE BI.TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(ES.START_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE ES.START_TIME END BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
        ES.HOST LIKE BI.HOST AND
        TO_VARCHAR(ES.PORT) LIKE BI.PORT AND
        ES.STATEMENT_HASH LIKE BI.STATEMENT_HASH AND
        ( BI.CONN_ID = -1 OR ES.CONNECTION_ID = BI.CONN_ID ) AND
        ( BI.OPERATIONS = 'TOTAL' AND ES.OPERATION IN ('AGGREGATED_EXECUTION', 'CALL', 'COMPILE', 'EXECUTE', 'EXECUTE_DDL', 'INSERT', 'UPDATE', 'DELETE') OR
          INSTR(BI.OPERATIONS, ES.OPERATION) != 0 OR
          BI.OPERATIONS = '%' ) AND
        ES.APP_USER LIKE BI.APP_USER AND
        ES.DB_USER LIKE BI.DB_USER AND
        IFNULL(ES.APPLICATION_SOURCE, '') LIKE BI.APP_SOURCE AND
        ( BI.MIN_MEM_GB = -1 OR ES.MEMORY_SIZE / 1024 / 1024 / 1024 >= BI.MIN_MEM_GB ) AND 
        ( BI.MAX_MEM_GB = -1 OR ES.MEMORY_SIZE / 1024 / 1024 / 1024 <= BI.MAX_MEM_GB ) AND
        ( BI.MIN_DURATION_S = -1 OR ES.DURATION_MICROSEC >= BI.MIN_DURATION_S * 1000000 ) AND
        IFNULL(ES.ERROR_TEXT, '') LIKE BI.ERROR_TEXT AND
        ( BI.ERROR_CODE = -1 OR ES.ERROR_CODE = BI.ERROR_CODE ) AND
        ( BI.ONLY_ERRORS = ' ' OR ES.ERROR_CODE != 0) AND
        UPPER(TO_VARCHAR(SUBSTR(ES.STATEMENT_STRING, 1, 5000))) LIKE UPPER(BI.SQL_PATTERN) LEFT OUTER JOIN
      "DataWareHouse.Database.Virtualtables::M_SQL_CLIENT_NETWORK_IO" N ON
        N.HOST = ES.HOST AND
        N.PORT = ES.PORT AND
        N.MESSAGE_ID = ES.NETWORK_MESSAGE_ID AND
        N.CONNECTION_ID = ES.CONNECTION_ID LEFT OUTER JOIN
      ( SELECT
          STATEMENT_EXECUTION_ID,
          STRING_AGG(TO_DECIMAL(ROUND(MEMORY_SIZE / 1024 / 1024), 10, 0) || CHAR(32) || 'MB (' || EXECUTION_HOST || ':' || EXECUTION_PORT || ')', ';' ORDER BY MEMORY_SIZE DESC) LOCATION_STATISTICS
        FROM
        ( SELECT
            STATEMENT_EXECUTION_ID,
            EXECUTION_HOST,
            EXECUTION_PORT,
            MAX(MEMORY_SIZE) MEMORY_SIZE
          FROM
            "DataWareHouse.Database.Virtualtables::M_EXPENSIVE_STATEMENT_EXECUTION_LOCATION_STATISTICS"
          GROUP BY
            STATEMENT_EXECUTION_ID,
            EXECUTION_HOST,
            EXECUTION_PORT
        )
        WHERE
          STATEMENT_EXECUTION_ID != 0
        GROUP BY
          STATEMENT_EXECUTION_ID
      ) ESL ON
        ESL.STATEMENT_EXECUTION_ID = ES.STATEMENT_EXECUTION_ID
    GROUP BY
      CASE
        WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TIME') != 0 THEN 
          CASE 
            WHEN BI.TIME_AGGREGATE_BY LIKE 'TS%' THEN
              TO_VARCHAR(ADD_SECONDS(TO_TIMESTAMP('2014/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS'), FLOOR(SECONDS_BETWEEN(TO_TIMESTAMP('2014/01/01 00:00:00', 
              'YYYY/MM/DD HH24:MI:SS'), CASE BI.TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(ES.START_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE ES.START_TIME END) / SUBSTR(BI.TIME_AGGREGATE_BY, 3)) * SUBSTR(BI.TIME_AGGREGATE_BY, 3)), 'YYYY/MM/DD HH24:MI:SS')
            ELSE TO_VARCHAR(CASE BI.TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(ES.START_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE ES.START_TIME END, BI.TIME_AGGREGATE_BY)
          END
        ELSE 'any' 
      END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')      != 0 THEN ES.HOST                                             ELSE MAP(BI.HOST, '%', 'any', BI.HOST)                     END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PORT')      != 0 THEN TO_VARCHAR(ES.PORT)                                 ELSE MAP(BI.PORT, '%', 'any', BI.PORT)                     END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HASH')      != 0 THEN ES.STATEMENT_HASH                                   ELSE MAP(BI.STATEMENT_HASH, '%', 'any', BI.STATEMENT_HASH) END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'STATEMENT_ID')  != 0 THEN ES.STATEMENT_ID                                   ELSE MAP(BI.STATEMENT_ID, '%', 'any', BI.STATEMENT_ID) END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CONN_ID')   != 0 THEN TO_VARCHAR(ES.CONNECTION_ID)                        ELSE MAP(BI.CONN_ID, -1, 'any', TO_VARCHAR(BI.CONN_ID))    END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'OPERATION') != 0 THEN ES.OPERATION                                        ELSE MAP(BI.OPERATIONS, '%', 'any', BI.OPERATIONS)         END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'APP_USER')  != 0 THEN ES.APP_USER                                         ELSE MAP(BI.APP_USER, '%', 'any', BI.APP_USER)             END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'DB_USER')   != 0 THEN ES.DB_USER                                          ELSE MAP(BI.DB_USER, '%', 'any', BI.DB_USER)               END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'SCHEMA_NAME')   != 0 THEN ES.SCHEMA_NAME                                  ELSE MAP(BI.SCHEMA_NAME, '%', 'any', BI.SCHEMA_NAME)               END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'APPLICATION_NAME')   != 0 THEN ES.APPLICATION_NAME                                         ELSE MAP(BI.APPLICATION_NAME, '%', 'any', BI.APPLICATION_NAME)               END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'DB_USER')   != 0 THEN ES.DB_USER                                          ELSE MAP(BI.DB_USER, '%', 'any', BI.DB_USER)               END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'WORKLOAD_CLASS_NAME')   != 0 THEN ES.WORKLOAD_CLASS_NAME                                          ELSE MAP(BI.WORKLOAD_CLASS_NAME, '%', 'any', BI.WORKLOAD_CLASS_NAME)               END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'SOURCE')    != 0 THEN ES.APPLICATION_SOURCE                               ELSE MAP(BI.APP_SOURCE, '%', 'any', BI.APP_SOURCE)         END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'ERROR')     != 0 THEN ES.ERROR_CODE || MAP(ES.ERROR_TEXT, '', '', ' (' || ES.ERROR_TEXT || ')') ELSE 'any'                           END,
      CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'BINDS')     != 0 THEN ES.PARAMETERS                                       ELSE 'any'                                                 END,
      BI.RESULT_ROWS,
      BI.SQL_TEXT_OUTPUT_LENGTH,
      BI.ORDER_BY,
      BI.MIN_SQL_TEXT_LENGTH
  )
  WHERE
    (MIN_SQL_TEXT_LENGTH = -1 OR SQL_TEXT_LENGTH >= MIN_SQL_TEXT_LENGTH )
)
WHERE
  ( RESULT_ROWS = -1 OR ROW_NUM <= RESULT_ROWS )
ORDER BY
  ROW_NUM;
-- Prepare data from OOM table
ES_aggregated = SELECT
					SCHEMA_NAME,
					EXECUTIONS,
					ELAPSED_MS,
					CPU_MS,
					ELA_PER_EXEC_MS,
					REC_PER_EXEC,
					CPU_PER_EXEC_MS,
					MEM_USED_GB,
					MEM_PER_EXEC_GB,
					REPLACE_REGEXPR('([^0-9A-Za-z_.:<> ])' IN APPLICATION_NAME WITH ' ' OCCURRENCE ALL) as "APPLICATION_NAME",
					APP_USER,
					WORKLOAD_CLASS_NAME
				FROM :SAP_TABLE;
/*
Runs in all procedures containing humio ingestion.
Finds the environment in which the procedure run, and change it into DEV, TEST, PROD for readability and uniformity
*/
SELECT DISTINCT
	CASE 
		WHEN "SYSTEM_ID" = 'NU0' THEN 'DEV'
		WHEN "SYSTEM_ID" = 'NT0'	THEN 'TEST'
		WHEN "SYSTEM_ID" = 'NP0' THEN 'PROD'
		END AS "ENVIRONMENT" INTO ENVIRONMENT
		FROM "DataWareHouse.Database.Virtualtables::M_DATABASE";

--Creates a humio token to ingest into humio. Put here before the for loop to only create it once
--COMMENT FOR DEBUGGER  
  CALL "DataWareHouse.Database.Synonyms::token"(
	APP => 'AP_HUMIO',
	EXCEPTION_ON_ERROR => 1,
	JWT => ingesttoken
);

IF RECORD_COUNT(:ES_aggregated) >= 1 THEN
		FOR k IN 1..RECORD_COUNT(:ES_aggregated) DO 
		--FOR k IN 1..11 DO 
			SCHEMA_NAME = :ES_aggregated."SCHEMA_NAME"[:k];
			EXECUTIONS = :ES_aggregated."EXECUTIONS"[:k];
			ELAPSED_MS = :ES_aggregated."ELAPSED_MS"[:k];
			CPU_MS = :ES_aggregated."CPU_MS"[:k];
			ELA_PER_EXEC_MS = :ES_aggregated."ELA_PER_EXEC_MS"[:k];
			REC_PER_EXEC = :ES_aggregated."REC_PER_EXEC"[:k];
			CPU_PER_EXEC_MS = :ES_aggregated."CPU_PER_EXEC_MS"[:k];
			MEM_USED_GB = :ES_aggregated."MEM_USED_GB"[:k];
			MEM_PER_EXEC_GB = :ES_aggregated."MEM_PER_EXEC_GB"[:k];
			APPLICATION_NAME = :ES_aggregated."APPLICATION_NAME"[:k];
			APP_USER = :ES_aggregated."APP_USER"[:k];
			WORKLOAD_CLASS_NAME = :ES_aggregated."WORKLOAD_CLASS_NAME"[:k];
				CALL "DataWareHouse.Database.Synonyms::humio"(
			    MESSAGE => :aggregate_option,--aggregate_option,
			    LOG_LEVEL => 'WARNING',
			    HOST => 'HANA',
			    SRC => 'ES_aggregated.hdbprocedure',
			       ATTRIBUTES => '"ENVIRONMENT":"' || :ENVIRONMENT || 
			    				'", "PROCEDURE_TIMESTAMP":"' || :RUNTIME_START || 
			    				'", "SCHEMA_NAME":"' || :SCHEMA_NAME || 
			    				'", "EXECUTIONS":"' || :EXECUTIONS ||
			    				'", "ELAPSED_MS":"' || :ELAPSED_MS ||
			    				'", "CPU_MS":"' || :CPU_MS ||
			    				'", "ELA_PER_EXEC_MS":"' || :ELA_PER_EXEC_MS ||
			    				'", "REC_PER_EXEC":"' || :REC_PER_EXEC ||
			    				'", "CPU_PER_EXEC_MS":"' || :CPU_PER_EXEC_MS ||
			    				'", "MEM_USED_GB":"' || :MEM_USED_GB ||
			    				'", "MEM_PER_EXEC_GB":"' || :MEM_PER_EXEC_GB ||
			    				'", "APPLICATION_NAME":"' || :APPLICATION_NAME ||
			    				'", "APP_USER":"' || :APP_USER ||
			    				'", "WORKLOAD_CLASS_NAME":"' || :WORKLOAD_CLASS_NAME 
			       ||'"',
			    JWT => :ingesttoken,
			    EXCEPTION_ON_ERROR => 1
			);
			-- Event has been sent correctly to humio.
			--INSERT INTO "DataWareHouse.Database.Tables::log.event_processing"("STATEMENT_HASH", "OOM_TIME", "RUNTIME", "NUM_OOMS", "COMMENT")  VALUES(:STATEMENT_HASH, :OOM_TIME, CURRENT_TIMESTAMP, :NUM_OOMS, 'Sent to humio');
			--COMMIT;-- to be sure the above log is written even if for some of the record humio return en ERROR. Without commit HANA perform rollback of all DB updates.
		END FOR;
	
	END IF;
	

	
	
  RUNTIME_END = CURRENT_TIMESTAMP;
  /* Logs the procedure runs*/
-- COMMENT FOR DEBUGGIER:	
 INSERT INTO "DataWareHouse.Database.Tables::log.procedure_run" ("NAME", "RUNTIME_START", "RUNTIME_END", "COMMENT") VALUES(:HANA_LOG_NAME, :RUNTIME_START, :RUNTIME_END, :aggregate_option);	
  
END