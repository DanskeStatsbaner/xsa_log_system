PROCEDURE "DataWareHouse.Database.Procedures::ES_main"()
--===========================
/*
----------------------------------------------------------------------------------------------
 04.2023, @Marek Janczura
Read current expensive statements and refresh DELTA
Update DELTA
*/

LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER

--READS SQL DATA AS --for DEBUG session only END
-- COMMENT FOR DEBUGGIER:
AS
BEGIN

DECLARE HANA_LOG_NAME NVARCHAR(250);
DECLARE RUNTIME_START, LAST_RUN Timestamp;

RUNTIME_START = CURRENT_TIMESTAMP;
HANA_LOG_NAME ='ES_aggregated';
	
	SELECT IFNULL(MAX("RUNTIME_START"),'2023-03-01 09:00:00.000000000') 
	INTO LAST_RUN 
	FROM "DataWareHouse.Database.Tables::log.procedure_run"
	WHERE "NAME" = 'ES_aggregated';


--== DELTA logic
--Catch log into internal table
--Calculate in memory table that holds the only new recrods

it_expensive_statements = SELECT 
	"HOST",
	"PORT",
	"CONNECTION_ID",
	"TRANSACTION_ID",
	"UPDATE_TRANSACTION_ID",
	"STATEMENT_ID",
	"STATEMENT_EXECUTION_ID",
	"PARENT_STATEMENT_ID",
	"STATEMENT_HASH",
	"DB_USER",
	"SCHEMA_NAME",
	"APP_USER",
	"START_TIME",
	"DURATION_MICROSEC",
	--in case of issue with name, use regex: REPLACE_REGEXPR('([^0-9A-Za-z_.:<> ])' IN "OBJECT_NAME" WITH ' ' OCCURRENCE ALL) as "OBJECT_NAME",
	"OBJECT_NAME",
	"OPERATION",
	"RECORDS",
	to_clob("STATEMENT_STRING") as "STATEMENT_STRING",
	'' "PARAMETERS",
	"ERROR_CODE",
	'' "ERROR_TEXT",
	"LOCK_WAIT_COUNT",
	"LOCK_WAIT_DURATION",
	"ALLOC_MEM_SIZE_ROWSTORE",
	"ALLOC_MEM_SIZE_COLSTORE",
	"MEMORY_SIZE",
	"REUSED_MEMORY_SIZE",
	"CPU_TIME",
	"PASSPORT_ROOT_CONTEXT_ID",
	"PASSPORT_TRANSACTION_ID",
	"PASSPORT_CONNECTION_ID",
	"PASSPORT_CONNECTION_COUNTER",
	"STATEMENT_START_TIME",
	"APPLICATION_SOURCE",
	"APPLICATION_NAME",
	"NETWORK_MESSAGE_ID",
	"WORKLOAD_CLASS_NAME",
	"PRIORITY",
	"STATEMENT_THREAD_LIMIT",
	"STATEMENT_MEMORY_LIMIT",
	'' "SESSION_VARIABLES",
	"TOTAL_STATEMENT_MEMORY_LIMIT",
	"TOTAL_STATEMENT_THREAD_LIMIT"
FROM "ES_Staging_Temporal"
--"DataWareHouse.Database.Virtualtables::M_EXPENSIVE_STATEMENTS" 
WHERE OPERATION !='AGGREGATED_EXECUTION';
it_expensive_statements_new = 
SELECT 
		"HOST",
	"PORT",
	"CONNECTION_ID",
	"TRANSACTION_ID",
	"UPDATE_TRANSACTION_ID",
	"STATEMENT_ID",
	"STATEMENT_EXECUTION_ID",
	"PARENT_STATEMENT_ID",
	"STATEMENT_HASH",
	"DB_USER",
	"SCHEMA_NAME",
	"APP_USER",
	"START_TIME",
	"DURATION_MICROSEC",
	"OBJECT_NAME",
	"OPERATION",
	"RECORDS",
	"STATEMENT_STRING",
	"PARAMETERS",
	"ERROR_CODE",
	"ERROR_TEXT",
	"LOCK_WAIT_COUNT",
	"LOCK_WAIT_DURATION",
	"ALLOC_MEM_SIZE_ROWSTORE",
	"ALLOC_MEM_SIZE_COLSTORE",
	"MEMORY_SIZE",
	"REUSED_MEMORY_SIZE",
	"CPU_TIME",
	"PASSPORT_ROOT_CONTEXT_ID",
	"PASSPORT_TRANSACTION_ID",
	"PASSPORT_CONNECTION_ID",
	"PASSPORT_CONNECTION_COUNTER",
	"STATEMENT_START_TIME",
	"APPLICATION_SOURCE",
	"APPLICATION_NAME",
	"NETWORK_MESSAGE_ID",
	"WORKLOAD_CLASS_NAME",
	"PRIORITY",
	"STATEMENT_THREAD_LIMIT",
	"STATEMENT_MEMORY_LIMIT",
	"SESSION_VARIABLES",
	"TOTAL_STATEMENT_MEMORY_LIMIT",
	"TOTAL_STATEMENT_THREAD_LIMIT"
FROM :it_expensive_statements
	INNER JOIN --SELECT ONLY NEW RECORDS
		(	SELECT concat(concat(concat(STATEMENT_ID,CONNECTION_ID),START_TIME), OPERATION) longKey 
			FROM :it_expensive_statements
			MINUS
			SELECT "longKey" 
			FROM "DataWareHouse.Database.Tables::log.es_processing"
			
		) new_records
	ON new_records.longKey = concat(concat(concat(:it_expensive_statements.STATEMENT_ID,:it_expensive_statements.CONNECTION_ID),:it_expensive_statements.START_TIME), :it_expensive_statements.OPERATION);


--Wite keys of the records that will be processed. Used in the delta process to process only NEW records.
UPSERT "DataWareHouse.Database.Tables::log.es_processing"
SELECT  concat(concat(concat(STATEMENT_ID,CONNECTION_ID),START_TIME), OPERATION), CURRENT_TIMESTAMP
FROM :it_expensive_statements_new;

DELETE FROM  "DataWareHouse.Database.Tables::log.es_new_logs";
INSERT INTO "DataWareHouse.Database.Tables::log.es_new_logs"
SELECT *  FROM  :it_expensive_statements_new;

--:it_expensive_statements_new
--CALL "DataWareHouse.Database.Procedures::ES_aggregated"(AGGREGATE_OPTION => 'SCHEMA_NAME'/*<NVARCHAR(500)>*/,IT_EXPENSIVE_STATEMENTS_NEW => :it_expensive_statements_new
--CALL "DataWareHouse.Database.Procedures::ES_aggregated"(AGGREGATE_OPTION => 'APPLICATION_NAME'/*<NVARCHAR(500)>*/,IT_EXPENSIVE_STATEMENTS_NEW => :it_expensive_statements_new)
--CALL "DataWareHouse.Database.Procedures::ES_aggregated"(AGGREGATE_OPTION => 'APP_USER'/*<NVARCHAR(500)>*/,IT_EXPENSIVE_STATEMENTS_NEW => :it_expensive_statements_new)
END