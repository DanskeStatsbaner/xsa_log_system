PROCEDURE "DataWareHouse.Database.Procedures::cpu_monitor"( )
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS
BEGIN

DECLARE k Integer;
DECLARE TIMESTAMP Timestamp;
DECLARE ingesttoken NVARCHAR(2500);
DECLARE HOST, LOG_LEVEL, ENVIRONMENT  NVARCHAR(250);
DECLARE  USER_PCT,SYSTEM_PCT,WAITIO_PCT,BUSY_PCT,IDLE_PCT DECIMAL (10,2);
DECLARE NUMA_NODE, CPU_THREADS, CORE INTEGER;
DECLARE seconds_Dif INTEGER = SECONDS_BETWEEN(CURRENT_UTCTIMESTAMP,CURRENT_TIMESTAMP);
 
LOG_LEVEL = 'INFO';


CPU =
SELECT
  TO_VARCHAR(TIMESTAMP, 'YYYY/MM/DD HH24:MI:SS') TIMESTAMP,
  HOST,
  LPAD(NUMA_NODE, 9) NUMA_NODE,
  LPAD(CPU_THREADS, 11) CPU_THREADS,
  LPAD(CORE, 4) CORE,
  LPAD(TO_DECIMAL(USER_PCT, 10, 2), 8) USER_PCT,
  LPAD(TO_DECIMAL(SYSTEM_PCT, 10, 2), 10) SYSTEM_PCT,
  LPAD(TO_DECIMAL(WAITIO_PCT, 10, 2), 10) WAITIO_PCT,
  LPAD(TO_DECIMAL(BUSY_PCT, 10, 2), 9) BUSY_PCT,
  LPAD(TO_DECIMAL(IDLE_PCT, 10, 2), 9) IDLE_PCT
FROM
( SELECT
    MAX(TIMESTAMP) TIMESTAMP,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')      != 0 THEN C.HOST                  ELSE MAP(BI.HOST,     '%', 'any', BI.HOST)                  END HOST,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CPU')       != 0 THEN C.CORE                  ELSE MAP(BI.CORE,      -1, 'any', TO_VARCHAR(BI.CORE))      END CORE,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'NUMA_NODE') != 0 THEN TO_VARCHAR(N.NUMA_NODE) ELSE MAP(BI.NUMA_NODE, -1, 'any', TO_VARCHAR(BI.NUMA_NODE)) END NUMA_NODE,
    AVG(USER_PCT) USER_PCT,
    AVG(SYSTEM_PCT) SYSTEM_PCT,
    AVG(WAITIO_PCT) WAITIO_PCT,
    AVG(BUSY_PCT) BUSY_PCT,
    AVG(IDLE_PCT) IDLE_PCT,
    COUNT(*) CPU_THREADS,
    BI.MIN_BUSY_PCT,
    BI.ORDER_BY
  FROM
  ( SELECT                       /* Modification section */
      '%' HOST,
      -1 NUMA_NODE,
      -1 CORE,
      -1 MIN_BUSY_PCT,
      'HOST, NUMA_NODE' AGGREGATE_BY,       /* HOST, CPU, NUMA_NODE or comma separated combinations, NONE for no aggregation */
      'BUSY' ORDER_BY            /* IDLE, BUSY, USER, SYSTEM, WAITIO, HOST, CORE, NUMA_NODE */
    FROM
      "DataWareHouse.Database.Synonyms::DUMMY"
  ) BI,
  ( SELECT
      MAX(TIMESTAMP) TIMESTAMP,
      HOST,
      MEASURED_ELEMENT_NAME CORE,
      SUM(MAP(CAPTION, 'User Time', TO_NUMBER(VALUE), 0)) USER_PCT,
      SUM(MAP(CAPTION, 'System Time', TO_NUMBER(VALUE), 0)) SYSTEM_PCT,
      SUM(MAP(CAPTION, 'Wait Time', TO_NUMBER(VALUE), 0)) WAITIO_PCT,
      SUM(MAP(CAPTION, 'Idle Time', 0, TO_NUMBER(VALUE))) BUSY_PCT,
      SUM(MAP(CAPTION, 'Idle Time', TO_NUMBER(VALUE), 0)) IDLE_PCT
    FROM
      "DataWareHouse.Database.Virtualtables::M_HOST_AGENT_METRICS"
    WHERE
      MEASURED_ELEMENT_TYPE = 'Processor'
    GROUP BY
      HOST,
      MEASURED_ELEMENT_NAME
  ) C LEFT OUTER JOIN
  ( SELECT
      NUMA_NODE,
            CASE WHEN LOCATE(LOGICAL_CORE_IDS, '-') = 0 THEN TO_NUMBER(LOGICAL_CORE_IDS) ELSE TO_NUMBER(SUBSTR(LOGICAL_CORE_IDS, 1, LOCATE(LOGICAL_CORE_IDS, '-') - 1)) END MIN_CORE,
            CASE WHEN LOCATE(LOGICAL_CORE_IDS, '-') = 0 THEN TO_NUMBER(LOGICAL_CORE_IDS) ELSE TO_NUMBER(SUBSTR(LOGICAL_CORE_IDS, LOCATE(LOGICAL_CORE_IDS, '-') + 1)) END MAX_CORE
    FROM
    ( SELECT
        N.NUMA_NODE,
        SUBSTR(N.LOGICAL_CORE_IDS, LOCATE(N.LOGICAL_CORE_IDS, ',', 0, L.LNO) + 1, LOCATE(N.LOGICAL_CORE_IDS, ',', 0, L.LNO + 1) - LOCATE(N.LOGICAL_CORE_IDS, ',', 0, L.LNO) - 1) LOGICAL_CORE_IDS
      FROM
      ( SELECT TOP 200 ROW_NUMBER() OVER () LNO FROM "DataWareHouse.Database.Synonyms::OBJECTS" ) L,
      ( SELECT DISTINCT
          NUMA_NODE_ID NUMA_NODE,
          ',' || LOGICAL_CORE_IDS || ',' LOGICAL_CORE_IDS
        FROM
          "DataWareHouse.Database.Virtualtables::M_NUMA_NODES"
      ) N
    )
    WHERE
      LOGICAL_CORE_IDS != ''
  ) N ON
    C.CORE BETWEEN N.MIN_CORE AND N.MAX_CORE
  WHERE
    C.HOST LIKE BI.HOST AND
    ( BI.CORE = -1 OR C.CORE LIKE TO_VARCHAR(BI.CORE)) AND
    ( BI.NUMA_NODE = -1 OR N.NUMA_NODE = BI.NUMA_NODE )
  GROUP BY
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')      != 0 THEN C.HOST                  ELSE MAP(BI.HOST,     '%', 'any', BI.HOST)                  END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CPU')       != 0 THEN C.CORE                  ELSE MAP(BI.CORE,      -1, 'any', TO_VARCHAR(BI.CORE))      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'NUMA_NODE') != 0 THEN TO_VARCHAR(N.NUMA_NODE) ELSE MAP(BI.NUMA_NODE, -1, 'any', TO_VARCHAR(BI.NUMA_NODE)) END,
    BI.MIN_BUSY_PCT,
    BI.ORDER_BY
)
WHERE
  ( MIN_BUSY_PCT = -1 OR BUSY_PCT >= MIN_BUSY_PCT ) 
ORDER BY
  MAP(ORDER_BY, 'IDLE', IDLE_PCT),
  MAP(ORDER_BY, 'USER', USER_PCT, 'SYSTEM', SYSTEM_PCT, 'WAITIO', WAITIO_PCT, 'BUSY', BUSY_PCT) DESC,
  MAP(ORDER_BY, 'HOST', HOST, 'NUMA_NODE', NUMA_NODE),
  CORE;

  CALL "DataWareHouse.Database.Synonyms::token"(
	APP => 'AP_HUMIO',
	EXCEPTION_ON_ERROR => 1,
	JWT => ingesttoken
);

SELECT DISTINCT
	CASE 
		WHEN "SYSTEM_ID" = 'NU0' THEN 'DEV'
		WHEN "SYSTEM_ID" = 'NPT'	THEN 'TEST'
		WHEN "SYSTEM_ID" = 'NP0' THEN 'PROD'
		END AS "ENVIRONMENT" INTO ENVIRONMENT
		FROM "DataWareHouse.Database.Virtualtables::M_DATABASE";



	IF RECORD_COUNT(:CPU) >= 1 THEN
		FOR k IN 1..RECORD_COUNT(:CPU) DO 
			TIMESTAMP = :CPU."TIMESTAMP"[:k];
			HOST = :CPU."HOST"[:k];
			NUMA_NODE = :CPU."NUMA_NODE"[:k];
			CPU_THREADS = :CPU."CPU_THREADS"[:k];
			CORE = :CPU."CORE"[:k];
			USER_PCT = :CPU."USER_PCT"[:k];
			SYSTEM_PCT = :CPU."SYSTEM_PCT"[:k];
			WAITIO_PCT = :CPU."WAITIO_PCT"[:k];
			BUSY_PCT = :CPU."BUSY_PCT"[:k];
			IDLE_PCT  = :CPU."IDLE_PCT"[:k];

			CALL "DataWareHouse.Database.Synonyms::humio"(
    MESSAGE => 'Native HANA system log',
    LOG_LEVEL => :LOG_LEVEL,
    HOST => 'HANA',
    SRC => 'agents_monitor.hdbprocedure',
       ATTRIBUTES => '"LOG_TIMESTAMP":"' || :TIMESTAMP || '", "ENVIRONMENT":"' || :ENVIRONMENT || '", "HOST":"' || :HOST 
       ||  '", "NUMA_NODE":"' || :NUMA_NODE || '", "CPU_THREADS":"' || :CPU_THREADS 
       || '", "CORE":"' || :CORE  || '", "USER_PCT":"' || :USER_PCT 
       || '", "SYSTEM_PCT":"' || :SYSTEM_PCT  || '", "WAITIO_PCT":"' || :WAITIO_PCT 
       || '", "BUSY_PCT":"' || :BUSY_PCT || '", "IDLE_PCT":"' || :IDLE_PCT 
       ||'"',
    JWT => :ingesttoken,
    EXCEPTION_ON_ERROR => 1
);
		END FOR;
	
	END IF; 

END