PROCEDURE "DataWareHouse.Database.Procedures::sys_m_memory"( )
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS
BEGIN SEQUENTIAL EXECUTION

DECLARE k Integer;
DECLARE LOG_TIMESTAMP Timestamp;
DECLARE ingesttoken NVARCHAR(2500);
DECLARE PORT, ENVIRONMENT, LOG_LEVEL  NVARCHAR(250);
DECLARE SYSTEM_MEMORY_SIZE_GB, SYSTEM_MEMORY_USED_SIZE_GB, SYSTEM_MEMORY_FREE_SIZE_GB, PROCESS_MEMORY_SIZE_GB, PROCESS_RESIDENT_SIZE_GB, PROCESS_CODE_SIZE_GB, PROCESS_STACK_SIZE_GB, PROCESS_ALLOCATION_LIMIT_GB, GLOBAL_ALLOCATION_LIMIT_GB, EFFECTIVE_PROCESS_ALLOCATION_LIMIT_GB, 
HEAP_MEMORY_ALLOCATED_SIZE_GB,  HEAP_MEMORY_USED_SIZE_GB, HEAP_MEMORY_FREE_SIZE_GB, HEAP_MEMORY_ROOT_ALLOCATED_SIZE_GB, HEAP_MEMORY_ROOT_FREE_SIZE_GB, SHARED_MEMORY_ALLOCATED_SIZE_GB,
SHARED_MEMORY_SIZE_GB, SHARED_MEMORY_USED_SIZE_GB, SHARED_MEMORY_FREE_SIZE_GB, TOTAL_MEMORY_SIZE_IN_USE_GB,
COMPACTORS_SIZE_GB, COMPACTORS_FREEABLE_SIZE_GB DECIMAL (10,2);
DECLARE seconds_Dif INTEGER = SECONDS_BETWEEN(CURRENT_UTCTIMESTAMP,CURRENT_TIMESTAMP);

LOG_TIMESTAMP = CURRENT_TIMESTAMP;


LOG_LEVEL = 'INFO';

PIVOTED_TABLE =
SELECT 
	PORT,
	SUM(CASE WHEN "NAME" = 'SYSTEM_MEMORY_SIZE' THEN "VALUE" END) AS SYSTEM_MEMORY_SIZE,
	SUM(CASE WHEN "NAME" = 'SYSTEM_MEMORY_FREE_SIZE' THEN "VALUE" END) AS SYSTEM_MEMORY_FREE_SIZE,
	SUM(CASE WHEN "NAME" = 'PROCESS_MEMORY_SIZE' THEN "VALUE" END) PROCESS_MEMORY_SIZE,
	SUM(CASE WHEN "NAME" = 'PROCESS_RESIDENT_SIZE' THEN "VALUE" END) AS PROCESS_RESIDENT_SIZE,
	SUM(CASE WHEN "NAME" = 'PROCESS_CODE_SIZE' THEN "VALUE" END) AS PROCESS_CODE_SIZE,
	SUM(CASE WHEN "NAME" = 'PROCESS_STACK_SIZE' THEN "VALUE" END) AS PROCESS_STACK_SIZE,
	SUM(CASE WHEN "NAME" = 'PROCESS_ALLOCATION_LIMIT' THEN "VALUE" END) AS PROCESS_ALLOCATION_LIMIT,
	SUM(CASE WHEN "NAME" = 'GLOBAL_ALLOCATION_LIMIT' THEN "VALUE" END) AS GLOBAL_ALLOCATION_LIMIT,
	SUM(CASE WHEN "NAME" = 'EFFECTIVE_PROCESS_ALLOCATION_LIMIT' THEN "VALUE" END) AS EFFECTIVE_PROCESS_ALLOCATION_LIMIT,
	SUM(CASE WHEN "NAME" = 'HEAP_MEMORY_ALLOCATED_SIZE' THEN "VALUE" END) AS HEAP_MEMORY_ALLOCATED_SIZE,
	SUM(CASE WHEN "NAME" = 'HEAP_MEMORY_USED_SIZE' THEN "VALUE" END) AS HEAP_MEMORY_USED_SIZE,
	SUM(CASE WHEN "NAME" = 'HEAP_MEMORY_FREE_SIZE' THEN "VALUE" END) AS HEAP_MEMORY_FREE_SIZE,
	SUM(CASE WHEN "NAME" = 'HEAP_MEMORY_ROOT_ALLOCATED_SIZE' THEN "VALUE" END) AS HEAP_MEMORY_ROOT_ALLOCATED_SIZE,
	SUM(CASE WHEN "NAME" = 'HEAP_MEMORY_ROOT_FREE_SIZE' THEN "VALUE" END) AS HEAP_MEMORY_ROOT_FREE_SIZE,
 	SUM(CASE WHEN "NAME" = 'SHARED_MEMORY_ALLOCATED_SIZE' THEN "VALUE" END) AS SHARED_MEMORY_ALLOCATED_SIZE,
	SUM(CASE WHEN "NAME" = 'SHARED_MEMORY_USED_SIZE' THEN "VALUE" END) AS SHARED_MEMORY_USED_SIZE,
 	SUM(CASE WHEN "NAME" = 'SHARED_MEMORY_FREE_SIZE' THEN "VALUE" END) AS SHARED_MEMORY_FREE_SIZE,
 	SUM(CASE WHEN "NAME" = 'TOTAL_MEMORY_SIZE_IN_USE' THEN "VALUE" END) AS TOTAL_MEMORY_SIZE_IN_USE,
 	SUM(CASE WHEN "NAME" = 'COMPACTORS_SIZE' THEN "VALUE" END) AS COMPACTORS_SIZE,
 	SUM(CASE WHEN "NAME" = 'COMPACTORS_FREEABLE_SIZE' THEN "VALUE" END) AS COMPACTORS_FREEABLE_SIZE
	FROM "DataWareHouse.Database.Virtualtables::M_MEMORY"
GROUP BY PORT;

SYS_M_MEMORY =
SELECT 
PORT,
	TO_DECIMAL(("SYSTEM_MEMORY_SIZE"/1024/1024/1024),10,2) AS "SYSTEM_MEMORY_SIZE_GB" ,
	TO_DECIMAL((("SYSTEM_MEMORY_SIZE"-"SYSTEM_MEMORY_FREE_SIZE")/1024/1024/1024),10,2)  AS "SYSTEM_MEMORY_USED_SIZE_GB" ,
	TO_DECIMAL(("SYSTEM_MEMORY_FREE_SIZE"/1024/1024/1024),10,2) AS "SYSTEM_MEMORY_FREE_SIZE_GB" ,
	TO_DECIMAL(("PROCESS_MEMORY_SIZE"/1024/1024/1024),10,2) AS "PROCESS_MEMORY_SIZE_GB" ,
	TO_DECIMAL(("PROCESS_RESIDENT_SIZE"/1024/1024/1024),10,2) AS "PROCESS_RESIDENT_SIZE_GB",
	TO_DECIMAL(("PROCESS_CODE_SIZE"/1024/1024/1024),10,2) AS "PROCESS_CODE_SIZE_GB" ,
	TO_DECIMAL(("PROCESS_STACK_SIZE"/1024/1024/1024),10,2) AS "PROCESS_STACK_SIZE_GB" ,
	TO_DECIMAL(("PROCESS_ALLOCATION_LIMIT"/1024/1024/1024),10,2) AS "PROCESS_ALLOCATION_LIMIT_GB" ,
	TO_DECIMAL(("GLOBAL_ALLOCATION_LIMIT"/1024/1024/1024),10,2) AS "GLOBAL_ALLOCATION_LIMIT_GB",
	TO_DECIMAL(("EFFECTIVE_PROCESS_ALLOCATION_LIMIT"/1024/1024/1024),10,2) AS "EFFECTIVE_PROCESS_ALLOCATION_LIMIT_GB" ,
	TO_DECIMAL(("HEAP_MEMORY_ALLOCATED_SIZE"/1024/1024/1024),10,2) AS "HEAP_MEMORY_ALLOCATED_SIZE_GB" ,

	TO_DECIMAL(("HEAP_MEMORY_USED_SIZE"/1024/1024/1024),10,2) AS "HEAP_MEMORY_USED_SIZE_GB" ,
	TO_DECIMAL(("HEAP_MEMORY_FREE_SIZE"/1024/1024/1024),10,2) AS "HEAP_MEMORY_FREE_SIZE_GB",
	TO_DECIMAL(("HEAP_MEMORY_ROOT_ALLOCATED_SIZE"/1024/1024/1024),10,2) AS "HEAP_MEMORY_ROOT_ALLOCATED_SIZE_GB" ,

	TO_DECIMAL(("HEAP_MEMORY_ROOT_FREE_SIZE"/1024/1024/1024),10,2) AS "HEAP_MEMORY_ROOT_FREE_SIZE_GB" ,
	TO_DECIMAL(("SHARED_MEMORY_ALLOCATED_SIZE"/1024/1024/1024),10,2) AS "SHARED_MEMORY_ALLOCATED_SIZE_GB" ,
	TO_DECIMAL((("SHARED_MEMORY_USED_SIZE"+"SHARED_MEMORY_FREE_SIZE")/1024/1024/1024),10,2) AS "SHARED_MEMORY_SIZE_GB" ,
	TO_DECIMAL(("SHARED_MEMORY_USED_SIZE"/1024/1024/1024),10,2) AS "SHARED_MEMORY_USED_SIZE_GB" ,
	TO_DECIMAL(("SHARED_MEMORY_FREE_SIZE"/1024/1024/1024),10,2) AS "SHARED_MEMORY_FREE_SIZE_GB",
	TO_DECIMAL(("TOTAL_MEMORY_SIZE_IN_USE"/1024/1024/1024),10,2) AS "TOTAL_MEMORY_SIZE_IN_USE_GB" ,
	TO_DECIMAL(("COMPACTORS_SIZE"/1024/1024/1024),10,2) AS "COMPACTORS_SIZE_GB" ,
	TO_DECIMAL(("COMPACTORS_FREEABLE_SIZE"/1024/1024/1024),10,2) AS "COMPACTORS_FREEABLE_SIZE_GB"
	FROM :PIVOTED_TABLE;




SELECT DISTINCT
	CASE 
		WHEN "SYSTEM_ID" = 'NU0' THEN 'DEV'
		WHEN "SYSTEM_ID" = 'NPT'	THEN 'TEST'
		WHEN "SYSTEM_ID" = 'NP0' THEN 'PROD'
		END AS "ENVIRONMENT" INTO ENVIRONMENT
		FROM "DataWareHouse.Database.Virtualtables::M_DATABASE";


	IF RECORD_COUNT(:SYS_M_MEMORY) >= 1 THEN
		FOR k IN 1..RECORD_COUNT(:SYS_M_MEMORY) DO 
		PORT= :SYS_M_MEMORY."PORT"[:k];
		SYSTEM_MEMORY_SIZE_GB	= :SYS_M_MEMORY."SYSTEM_MEMORY_SIZE_GB"[:k];
		SYSTEM_MEMORY_USED_SIZE_GB	= :SYS_M_MEMORY."SYSTEM_MEMORY_USED_SIZE_GB"[:k];
		SYSTEM_MEMORY_FREE_SIZE_GB	= :SYS_M_MEMORY."SYSTEM_MEMORY_FREE_SIZE_GB"[:k];
		PROCESS_MEMORY_SIZE_GB	= :SYS_M_MEMORY."PROCESS_MEMORY_SIZE_GB"[:k];
		PROCESS_RESIDENT_SIZE_GB	= :SYS_M_MEMORY."PROCESS_RESIDENT_SIZE_GB"[:k];
		PROCESS_CODE_SIZE_GB	= :SYS_M_MEMORY."PROCESS_CODE_SIZE_GB"[:k];
		PROCESS_STACK_SIZE_GB	= :SYS_M_MEMORY."PROCESS_STACK_SIZE_GB"[:k];
		PROCESS_ALLOCATION_LIMIT_GB	= :SYS_M_MEMORY."PROCESS_ALLOCATION_LIMIT_GB"[:k];
		GLOBAL_ALLOCATION_LIMIT_GB	= :SYS_M_MEMORY."GLOBAL_ALLOCATION_LIMIT_GB"[:k];
		EFFECTIVE_PROCESS_ALLOCATION_LIMIT_GB	= :SYS_M_MEMORY."EFFECTIVE_PROCESS_ALLOCATION_LIMIT_GB"[:k];
		HEAP_MEMORY_ALLOCATED_SIZE_GB	= :SYS_M_MEMORY."HEAP_MEMORY_ALLOCATED_SIZE_GB"[:k];
	
		HEAP_MEMORY_USED_SIZE_GB	= :SYS_M_MEMORY."HEAP_MEMORY_USED_SIZE_GB"[:k];
		HEAP_MEMORY_FREE_SIZE_GB	= :SYS_M_MEMORY."HEAP_MEMORY_FREE_SIZE_GB"[:k];
		HEAP_MEMORY_ROOT_ALLOCATED_SIZE_GB	= :SYS_M_MEMORY."HEAP_MEMORY_ROOT_ALLOCATED_SIZE_GB"[:k];

		HEAP_MEMORY_ROOT_FREE_SIZE_GB	= :SYS_M_MEMORY."HEAP_MEMORY_ROOT_FREE_SIZE_GB"[:k];
		SHARED_MEMORY_ALLOCATED_SIZE_GB	= :SYS_M_MEMORY."SHARED_MEMORY_ALLOCATED_SIZE_GB"[:k];
		SHARED_MEMORY_SIZE_GB	= :SYS_M_MEMORY."SHARED_MEMORY_SIZE_GB"[:k];
		SHARED_MEMORY_USED_SIZE_GB	= :SYS_M_MEMORY."SHARED_MEMORY_USED_SIZE_GB"[:k];
		SHARED_MEMORY_FREE_SIZE_GB	= :SYS_M_MEMORY."SHARED_MEMORY_FREE_SIZE_GB"[:k];
		TOTAL_MEMORY_SIZE_IN_USE_GB	= :SYS_M_MEMORY."TOTAL_MEMORY_SIZE_IN_USE_GB"[:k];
		COMPACTORS_SIZE_GB	= :SYS_M_MEMORY."COMPACTORS_SIZE_GB"[:k];
		COMPACTORS_FREEABLE_SIZE_GB	= :SYS_M_MEMORY."COMPACTORS_FREEABLE_SIZE_GB"[:k];






	CALL "DataWareHouse.Database.Synonyms::humio"(
    	MESSAGE => 'Native HANA system log',
		LOG_LEVEL => :LOG_LEVEL,
    	HOST => 'HANA',
    	SRC => 'sys_m_memory.hdbprocedure',
    	ATTRIBUTES => '"LOG_TIMESTAMP":"' || :LOG_TIMESTAMP || '", "ENVIRONMENT":"' || :ENVIRONMENT || '", "PORT":"' || :PORT 
    	|| '", "SYSTEM_MEMORY_SIZE_GB":"' || :SYSTEM_MEMORY_SIZE_GB || '", "SYSTEM_MEMORY_USED_SIZE_GB":"' || :SYSTEM_MEMORY_USED_SIZE_GB || '", "SYSTEM_MEMORY_FREE_SIZE_GB":"' || :SYSTEM_MEMORY_FREE_SIZE_GB
       || '", "PROCESS_MEMORY_SIZE_GB":"' || :PROCESS_MEMORY_SIZE_GB  || '", "PROCESS_RESIDENT_SIZE_GB":"' || :PROCESS_RESIDENT_SIZE_GB 
       || '", "PROCESS_CODE_SIZE_GB":"' || :PROCESS_CODE_SIZE_GB || '", "PROCESS_STACK_SIZE_GB":"' || :PROCESS_STACK_SIZE_GB ||  '", "PROCESS_ALLOCATION_LIMIT_GB":"' || :PROCESS_ALLOCATION_LIMIT_GB 
       || '", "GLOBAL_ALLOCATION_LIMIT_GB":"' || :GLOBAL_ALLOCATION_LIMIT_GB || '", "EFFECTIVE_PROCESS_ALLOCATION_LIMIT_GB":"' || :EFFECTIVE_PROCESS_ALLOCATION_LIMIT_GB 
       ||  '", "HEAP_MEMORY_ALLOCATED_SIZE_GB":"' || :HEAP_MEMORY_ALLOCATED_SIZE_GB 
       || '", "HEAP_MEMORY_USED_SIZE_GB":"' || :HEAP_MEMORY_USED_SIZE_GB || '", "HEAP_MEMORY_FREE_SIZE_GB":"' || :HEAP_MEMORY_FREE_SIZE_GB 
       ||  '", "HEAP_MEMORY_ROOT_ALLOCATED_SIZE_GB":"' || :HEAP_MEMORY_ROOT_ALLOCATED_SIZE_GB 
       || '", "HEAP_MEMORY_ROOT_FREE_SIZE_GB":"' || :HEAP_MEMORY_ROOT_FREE_SIZE_GB || '", "SHARED_MEMORY_ALLOCATED_SIZE_GB":"' || :SHARED_MEMORY_ALLOCATED_SIZE_GB 
       ||  '", "SHARED_MEMORY_SIZE_GB":"' || :SHARED_MEMORY_SIZE_GB ||  '", "SHARED_MEMORY_USED_SIZE_GB":"' || :SHARED_MEMORY_USED_SIZE_GB
       || '", "SHARED_MEMORY_FREE_SIZE_GB":"' || :SHARED_MEMORY_FREE_SIZE_GB || '", "TOTAL_MEMORY_SIZE_IN_USE_GB":"' || :TOTAL_MEMORY_SIZE_IN_USE_GB ||  '", "COMPACTORS_SIZE_GB":"' || :COMPACTORS_SIZE_GB ||  '", "COMPACTORS_FREEABLE_SIZE_GB":"' || :COMPACTORS_FREEABLE_SIZE_GB
       ||'"',
    JWT => :ingesttoken,
    EXCEPTION_ON_ERROR => 1
);
		END FOR;
	
	END IF; 

END